// Overbumper Intake Subsystem controls 
// copied from 2023 BunnyBot  1/22/2024 Rod N
// ROBOTBUILDER TYPE: Subsystem.

package frc.robot.subsystems.swervedrive;


import edu.wpi.first.wpilibj2.command.SubsystemBase;
import edu.wpi.first.wpilibj.DigitalInput;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS

 // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
 // REV smartMax code copied from Alternate Encoder example  %rod
import com.revrobotics.RelativeEncoder;
import com.revrobotics.SparkMaxPIDController;
import com.revrobotics.CANSparkMax;
import com.revrobotics.CANSparkMaxLowLevel.MotorType;  

/**
 *
 */
public class Intake extends SubsystemBase {
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    private static final int IntakeID= 10; 
    private static final int armID= 11; 

    private CANSparkMax intake_motor;
    private CANSparkMax arm_motor;
    private SparkMaxPIDController pidArm;
    private RelativeEncoder arm_encoder;
  //  private DigitalInput intakePhotoEye;
    public double kP, kI, kD, kIz, kFF, kMaxOutput, kMinOutput, maxRPM, maxVel, minVel, maxAcc, allowedErr;

   /**
    *
    */
    public Intake() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
         // initialize SPARK MAX with CAN ID
   
    //Intake Neo550      
    intake_motor = new CANSparkMax(IntakeID, MotorType.kBrushless);
    intake_motor.restoreFactoryDefaults();
    intake_motor.setSmartCurrentLimit( 10, 15);
    arm_motor = new CANSparkMax(armID, MotorType.kBrushless);
    arm_motor.restoreFactoryDefaults();
    arm_motor.setSmartCurrentLimit( 25, 25);

    pidArm = arm_motor.getPIDController();
    arm_encoder = arm_motor.getEncoder();
  //  intakePhotoEye = new DigitalInput(0);

    // set PID coefficients  Not Used yet...................
    pidArm.setP(0.00015); // proportional for Neo 550 arm
    pidArm.setI(0.0000);
    pidArm.setD(0);
    pidArm.setIZone(0);
    pidArm.setFF(0);
    pidArm.setOutputRange(-1, 1);

    // set Motion Magic
    int smartMotionSlot = 0; // ????????????????????????????????
    pidArm.setSmartMotionMaxVelocity(10000, smartMotionSlot);
    pidArm.setSmartMotionMinOutputVelocity(0, smartMotionSlot);
    pidArm.setSmartMotionMaxAccel(10000, smartMotionSlot);
    pidArm.setSmartMotionAllowedClosedLoopError(allowedErr, smartMotionSlot); // ?????????????

     // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
    }

    @Override
    public void periodic() {
        // This method will be called once per scheduler run
        SmartDashboard.putNumber("Intake Current", intake_motor.getOutputCurrent());
   
    }

    @Override
    public void simulationPeriodic() {
        // This method will be called once per scheduler run when in simulation

    }

    // Put methods for controlling this subsystem
    // here. Call these from Commands.

    public void driveintake(double intakeSpeed )
    {
        intake_motor.set(intakeSpeed);
    }
      
    public void driveArm(double armSpeed )
    {
        intake_motor.set(armSpeed);
    }
    
    public void position(double armPosition)
    {     // magic elbow control
        pidArm.setReference(armPosition, CANSparkMax.ControlType.kSmartMotion);
    }

    
}
    

