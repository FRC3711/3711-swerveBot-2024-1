// Single Wheel Shooter Subsystem controls 
// copied from 2023 Swerve-Clamp.java  10/31/2023 Rod N
// ROBOTBUILDER TYPE: Subsystem.

package frc.robot.subsystems.swervedrive;


import edu.wpi.first.wpilibj2.command.SubsystemBase;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS

 // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
 // REV smartMax code copied from Alternate Encoder example  %rod
import com.revrobotics.RelativeEncoder;
import com.revrobotics.SparkMaxPIDController;
import com.revrobotics.CANSparkMax;
import com.revrobotics.CANSparkMaxLowLevel.MotorType;
import com.revrobotics.ColorSensorV3.LEDCurrent;

import edu.wpi.first.wpilibj.DigitalInput;
/**
 *
 */
public class Shooter extends SubsystemBase {
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    private static final int LShooterID= 8;
    private static final int RShooterID= 9; 
 
  
    private CANSparkMax lShooter_motor;
    private CANSparkMax rShooter_motor;
    private SparkMaxPIDController pidLShooter;
    private SparkMaxPIDController pidRShooter;
 
    private RelativeEncoder lShooter_encoder;
    private RelativeEncoder rShooter_encoder;
    private DigitalInput feedPhotoEye;
    public double kP, kI, kD, kIz, kFF, kMaxOutput, kMinOutput, maxRPM, maxVel, minVel, maxAcc, allowedErr;
    /**
    *
    */
    public Shooter() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
         // initialize SPARK MAX with CAN ID
   
    // Shooter Neo500
    lShooter_motor = new CANSparkMax(LShooterID, MotorType.kBrushless);
    lShooter_motor.restoreFactoryDefaults();
    lShooter_motor.setSmartCurrentLimit( 30, 40);
    //pidlShooter = lShooter_motor.getPIDController();
    lShooter_encoder = lShooter_motor.getEncoder();

    rShooter_motor = new CANSparkMax(RShooterID, MotorType.kBrushless);
    rShooter_motor.restoreFactoryDefaults();
    rShooter_motor.setSmartCurrentLimit( 30, 40);
   // pidrShooter = rShooter_motor.getPIDController();
    rShooter_encoder = rShooter_motor.getEncoder();

    feedPhotoEye = new DigitalInput(0);

     // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
    }

    // // set PID coefficients  Not Used yet...................
    // pidShooter.setP(0.00015); // proportional for Neo 550 arm
    // pidShooter.setI(0.0000);
    // pidShooter.setD(0);
    // pidShooter.setIZone(0);
    // pidShooter.setFF(0);
    // pidShooter.setOutputRange(-1, 1);

    // // set Motion Magic
    // int smartMotionSlot = 0; // ????????????????????????????????
    // pidShooter.setSmartMotionMaxVelocity(10000, smartMotionSlot);
    // pidShooter.setSmartMotionMinOutputVelocity(0, smartMotionSlot);
    // pidShooter.setSmartMotionMaxAccel(10000, smartMotionSlot);
    // pidShooter.setSmartMotionAllowedClosedLoopError(allowedErr, smartMotionSlot); // ?????????????

    @Override
    public void periodic() {
        // This method will be called once per scheduler run
        SmartDashboard.putNumber("Shooter Drive", lShooter_motor.getAppliedOutput());
        SmartDashboard.putNumber("Shooter Current", lShooter_motor.getOutputCurrent());
        SmartDashboard.putBoolean("Feeder P/E", feedPhotoEye.get());

    }

    @Override
    public void simulationPeriodic() {
        // This method will be called once per scheduler run when in simulation

    }

    // Put methods for controlling this subsystem
    // here. Call these from Commands.

    public void position(double ShooterPose)
    {
     // magic elbow control
//     pidShooter.setReference(ShooterPose, CANSparkMax.ControlType.kSmartMotion);
 
  
    }
    public void driveShooter(double shooterSpeed )
    {
        lShooter_motor.set(shooterSpeed);
        rShooter_motor.set(-shooterSpeed);
    }

    public boolean photoeye( )
    {
        return(feedPhotoEye.get());
    }

       
}
    

